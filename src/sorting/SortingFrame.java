/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sorting;

import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Achmad Zulkarnain
 */
public class SortingFrame extends javax.swing.JFrame {

    static ArrayList<Integer> box = new ArrayList<Integer>();
    ArrayList<String> Stringbox = new ArrayList<String>();
    private static ArrayList<Integer> ArrayQuick = new ArrayList<Integer>();

    public static ArrayList<Data> record = new ArrayList<Data>(); //words which has frequency

    ArrayList<String> words = new ArrayList<String>(); //Contains Raw words from text file
    ArrayList<String> sorted = new ArrayList<String>(); //contains clean words from wordsArray

    public static long starttime;
    public static long endtime;

    public SortingFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Group = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Sort = new javax.swing.JButton();
        Heap = new javax.swing.JRadioButton();
        Merge = new javax.swing.JRadioButton();
        Quick = new javax.swing.JRadioButton();
        Add = new javax.swing.JButton();
        NumField = new javax.swing.JTextField();
        Clear = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ScreenNumber = new javax.swing.JTextArea();
        BrowseNum = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Browse = new javax.swing.JButton();
        sortText = new javax.swing.JButton();
        Freq = new javax.swing.JRadioButton();
        Alpha = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableText = new javax.swing.JTable();
        VocalButton = new javax.swing.JRadioButton();
        CharButton = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Enter Number:");

        Sort.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Sort.setText("Sort");
        Sort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortActionPerformed(evt);
            }
        });

        Group.add(Heap);
        Heap.setText("Heap");

        Group.add(Merge);
        Merge.setText("Merge");

        Group.add(Quick);
        Quick.setText("Quick");

        Add.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Add.setText("Add");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        ScreenNumber.setColumns(20);
        ScreenNumber.setLineWrap(true);
        ScreenNumber.setRows(5);
        jScrollPane3.setViewportView(ScreenNumber);

        BrowseNum.setText("Browse");
        BrowseNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseNumActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(jLabel1))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(Merge)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(Quick)
                                        .addGap(18, 18, 18)
                                        .addComponent(Heap))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(NumField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(Add)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(BrowseNum))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(Sort)
                                .addGap(44, 44, 44)
                                .addComponent(Clear)))
                        .addGap(0, 178, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(NumField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Add)
                    .addComponent(BrowseNum))
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Quick)
                    .addComponent(Merge)
                    .addComponent(Heap))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Sort)
                    .addComponent(Clear))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Number Sort", jPanel2);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Input File:");

        Browse.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Browse.setText("Browse");
        Browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseActionPerformed(evt);
            }
        });

        sortText.setText("SortText");
        sortText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortTextActionPerformed(evt);
            }
        });

        Group.add(Freq);
        Freq.setText("Frequency");

        Group.add(Alpha);
        Alpha.setText("Alphabetical");

        TableText.setAutoCreateRowSorter(true);
        TableText.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Word", "Frequency", "No of Vocals", "Characters"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(TableText);

        Group.add(VocalButton);
        VocalButton.setText("No. of Vocal");

        Group.add(CharButton);
        CharButton.setText("No. of Characters");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(sortText))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(Freq)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Alpha)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(VocalButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CharButton))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(Browse)))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(Browse))
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Freq)
                    .addComponent(Alpha)
                    .addComponent(VocalButton)
                    .addComponent(CharButton))
                .addGap(18, 18, 18)
                .addComponent(sortText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        jTabbedPane1.addTab("Text Sort", jPanel3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseActionPerformed

        JFileChooser jf = new JFileChooser();
        if (jf.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            try {
                //get the file
                java.io.File file = jf.getSelectedFile();

                //create scanner for the file
                Scanner scan = new Scanner(file);

                JOptionPane.showMessageDialog(this, "It takes several times to load", "Process Input", JOptionPane.INFORMATION_MESSAGE);
                words.clear();
                sorted.clear();
                record.clear();
                starttime = System.currentTimeMillis();

                //read text from file
                while (scan.hasNext()) {
                    words.add(scan.next());
                }

                //int counterVocal, counterWords;
                words.stream().map((s) -> s.toLowerCase()).map((s) -> new StringTokenizer(s, " ,.1234567890!-")).forEach((st) -> {
                    while (st.hasMoreTokens()) {
                        sorted.add(st.nextToken());
                    }
                });
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "File cannot be created!", "Input Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        //Adding in array object
        for (int x = 0; x < sorted.size(); x++) {
            Data d = new Data(sorted.get(x));

            if (record.isEmpty()) {
                record.add(d);
            } else if (!record.isEmpty()) {
                int index = search(d);
                if (index != -1) {
                    record.get(index).setFrequency();
                } else if (index == -1) {
                    record.add(d);
                }
            }
        }

        int counterVocal, counterWords;
        for (int i = 0; i < record.size(); i++) {
            counterVocal = 0;
            counterWords = 0;

            for (char c : record.get(i).getWords().toCharArray()) {
                if (c == 'a' || c == 'i' || c == 'u' || c == 'e' || c == 'o') {
                    counterVocal++;
                }
                counterWords++;
            }

            record.get(i).setVocals(counterVocal);
            record.get(i).setCharacters(counterWords);

        }

        Table(); //This method is to make display in table 

        endtime = System.currentTimeMillis();
        long result = (endtime - starttime) / 1000;

        JOptionPane.showMessageDialog(this, "Succesfully done in " + result + " seconds", "Process Input", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_BrowseActionPerformed

    public void Table() {
        DefaultTableModel model = (DefaultTableModel) TableText.getModel();
        int rowCount = model.getRowCount();

        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }

        //Add to table
        for (int i = 0; i < record.size(); i++) {
            model.addRow(new Object[]{(i + 1), record.get(i).getWords(), record.get(i).getFrequency(), record.get(i).getVocals(), record.get(i).getCharacters()});
        }

    }

    private void SortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortActionPerformed
        if (Heap.isSelected()) {
            starttime = System.currentTimeMillis();

            ScreenNumber.setText(box.toString());
            ScreenNumber.append("\n\n###   MAX HEAP SORT  ###\n");
            Heap<Integer> hp = new Heap<Integer>(); //Creating heap Object

            //Transfering data from box to heap Arraylist
            for (int i = 0; i < box.size(); i++) {
                hp.insert(box.get(i));
            }

            ScreenNumber.append("\n--------\n" + hp.toString() + "\n");
            ScreenNumber.append("\nBelow is the method:\n");
            ScreenNumber.append("********************");

            //Print out in the display
            while (!hp.isEmpty()) {
                int max = hp.delete();
                ScreenNumber.append("\n" + max + " " + hp);
            }
            endtime = System.currentTimeMillis();

            JOptionPane.showMessageDialog(this, "Succesfully Heap sort in " + (endtime - starttime) + " ms", "Process Input", JOptionPane.INFORMATION_MESSAGE);

        } else if (Merge.isSelected()) {
            starttime = System.currentTimeMillis();

            ScreenNumber.setText(box.toString());

            //creating object of unsorted array
            Merge mg = new Merge(box);

            ScreenNumber.append("\n\n###   Merge SORT  ###\n");
            ScreenNumber.append("***************************************\n");

            //Sorting array
            mg.sortGivenArray();

            //printing the sorted array
            ScreenNumber.append(mg.getSortedArray().toString());
            endtime = System.currentTimeMillis();

            JOptionPane.showMessageDialog(this, "Succesfully Merge sort in " + (endtime - starttime) + " ms", "Process Input", JOptionPane.INFORMATION_MESSAGE);
        } else if (Quick.isSelected()) {
            starttime = System.currentTimeMillis();

            //inserting unsorted array to QuickSort Method
            QuickSort(box);

            //Print unsorted element
            ScreenNumber.setText(box.toString());

            ScreenNumber.append("\n\n###   Quick SORT  ###\n");

            //Do quick start method
            startQuickStart(0, box.size() - 1);
            ScreenNumber.append("\n\n\n---------Processed sorted Array---------\n");
            ScreenNumber.append("********************************************\n");
            ScreenNumber.append(SortingFrame.getSortedArray().toString()); //Print out sorted array
            endtime = System.currentTimeMillis();

            JOptionPane.showMessageDialog(this, "Succesfully Quick sort in " + (endtime - starttime) + " ms", "Process Input", JOptionPane.INFORMATION_MESSAGE);
        } else if (Group.isSelected(null)) {
            JOptionPane.showMessageDialog(this, "Please tick sorting type", "Error Sorting", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_SortActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        ScreenNumber.setText(null); //clear the screen
        record.clear();
        ArrayQuick.clear();
    }//GEN-LAST:event_ClearActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        try {
            int n = Integer.parseInt(NumField.getText());
            box.add(n);
            ScreenNumber.append("");
            ScreenNumber.setText(box.toString());
            NumField.setText("");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please input Integer Number!", "Input Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_AddActionPerformed

    private void sortTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortTextActionPerformed
        //DefaultTableModel model = (DefaultTableModel) TableText.getModel();

        if (Freq.isSelected()) {
            starttime = System.currentTimeMillis();
            Collections.sort(record, Data.FreqComparator);
            Table();
            endtime = System.currentTimeMillis();
            long result = (endtime - starttime);

            JOptionPane.showMessageDialog(this, "Succesfully sort by Frequency in " + result + " ms", "Process Input", JOptionPane.INFORMATION_MESSAGE);
        } else if (Alpha.isSelected()) {
            starttime = System.currentTimeMillis();

            Collections.sort(record, Data.DataWordsComparator);
            Table();
            endtime = System.currentTimeMillis();
            long result = (endtime - starttime);

            JOptionPane.showMessageDialog(this, "Succesfully sort by Alphabeth in " + result + " ms", "Process Input", JOptionPane.INFORMATION_MESSAGE);
        } else if (VocalButton.isSelected()) {
            starttime = System.currentTimeMillis();

            Collections.sort(record, Data.VocalComparator);
            Table();
            endtime = System.currentTimeMillis();
            long result = (endtime - starttime);

            JOptionPane.showMessageDialog(this, "Succesfully sort by num of vocal in " + result + " ms", "Process Input", JOptionPane.INFORMATION_MESSAGE);
        } else if (CharButton.isSelected()) {
            starttime = System.currentTimeMillis();

            Collections.sort(record, Data.CharComparator);
            Table();
            endtime = System.currentTimeMillis();
            long result = (endtime - starttime);

            JOptionPane.showMessageDialog(this, "Succesfully sort by num of characters in " + result + " ms", "Process Input", JOptionPane.INFORMATION_MESSAGE);
        } else if (Group.isSelected(null)) {
            JOptionPane.showMessageDialog(this, "Please tick sorting type", "Error Sorting", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_sortTextActionPerformed

    private void BrowseNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseNumActionPerformed
        JFileChooser jf = new JFileChooser();
        if (jf.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            try {

                //get the file
                java.io.File file = jf.getSelectedFile();

                //create scanner for the file
                Scanner scan = new Scanner(file);
                JOptionPane.showMessageDialog(this, "It takes several times", "Process Input", JOptionPane.INFORMATION_MESSAGE);
                box.clear();

                starttime = System.currentTimeMillis();

                while (scan.hasNext()) {
                    box.add(Integer.parseInt(scan.next()));
                }

                ScreenNumber.setText(box.toString());

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please input integer!", "Input Error", JOptionPane.ERROR_MESSAGE);

            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "File not found!", "Input Error", JOptionPane.ERROR_MESSAGE);

            }
    }//GEN-LAST:event_BrowseNumActionPerformed
    }

    public int search(Data obj) {
        for (int j = 0; j < record.size(); j++) {
            if (record.get(j).getWords().equals(obj.getWords())) {
                return j;
            }
        }
        return -1;
    }

    public void QuickSort(ArrayList<Integer> e) {
        ArrayQuick = e;
    }

    public void startQuickStart(int start, int end) {
        int q;
        if (start < end) {
            q = partition(start, end);
            startQuickStart(start, q);
            startQuickStart(q + 1, end);
        }
    }

    public static ArrayList<Integer> getSortedArray() {
        return ArrayQuick;
    }

    int partition(int start, int end) {
        ScreenNumber.append("\n---------Iteration Starts----------");
        ScreenNumber.append("\nSorting Window from index number:" + start + " to " + end);

        int init = start;
        int length = end;

        Random r = new Random();
        int pivotIndex = nextIntInRange(start, end, r);
        int pivot = ArrayQuick.get(pivotIndex);

        ScreenNumber.append("\nPivot Element " + pivot + " at index: " + pivotIndex);
        while (true) {
            while (ArrayQuick.get(length) > pivot && length > start) {
                length--;
            }

            while (ArrayQuick.get(init) < pivot && init < end) {
                init++;
            }

            if (init < length) {
                int temp;
                temp = ArrayQuick.get(init);
                ArrayQuick.set(init, ArrayQuick.get(length));
                ArrayQuick.set(length, temp);
                length--;
                init++;

                ScreenNumber.append("\nAfter Swapping\n");
                for (int i = start; i <= end; i++) {
                    ScreenNumber.append(ArrayQuick.get(i) + " ");
                }
            } else {
                ScreenNumber.append("\n---------Iteration Ends---------\n");
                return length;
            }
        }

    }

    // Below method is to just find random integer from given range
    static int nextIntInRange(int min, int max, Random rng) {
        if (min > max) {
            throw new IllegalArgumentException("Cannot draw random int from invalid range [" + min + ", " + max + "].");
        }
        int diff = max - min;
        if (diff >= 0 && diff != Integer.MAX_VALUE) {
            return (min + rng.nextInt(diff + 1));
        }
        int i;
        do {
            i = rng.nextInt();
        } while (i < min || i > max);
        return i;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SortingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SortingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SortingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SortingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SortingFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JRadioButton Alpha;
    private javax.swing.JButton Browse;
    private javax.swing.JButton BrowseNum;
    private javax.swing.JRadioButton CharButton;
    private javax.swing.JButton Clear;
    private javax.swing.JRadioButton Freq;
    private javax.swing.ButtonGroup Group;
    private javax.swing.JRadioButton Heap;
    private javax.swing.JRadioButton Merge;
    private javax.swing.JTextField NumField;
    private javax.swing.JRadioButton Quick;
    private javax.swing.JTextArea ScreenNumber;
    private javax.swing.JButton Sort;
    private javax.swing.JTable TableText;
    private javax.swing.JRadioButton VocalButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton sortText;
    // End of variables declaration//GEN-END:variables
}
